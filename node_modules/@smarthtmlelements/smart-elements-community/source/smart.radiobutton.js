
/* Smart HTML Elements v4.6.0 (2019-Oct) 
Copyright (c) 2011-2019 jQWidgets. 
License: https://htmlelements.com/license/ */

Smart("smart-radio-button",class extends Smart.ToggleButton{static get properties(){return{checkMode:{value:"both",allowedValues:["both","input","label"],type:"string"},type:{value:"radio",type:"string",defaultReflectToAttribute:!0,readonly:!0},groupName:{value:"",type:"string"}}}template(){return`<div  id='container' class='smart-container'>
                 <div class ='smart-overlay'></div>
                 <span id='radioButtonInput' class ='smart-input'></span>
                 <span id='radioButtonLabel' inner-h-t-m-l='[[innerHTML]]' class ='smart-label'><content></content></span>
                 <input id='hiddenInput' class ='smart-hidden-input' type='hidden'>
               </div>`}static get listeners(){return{down:"_downHandler","document.up":"_documentUpHandler",mouseenter:"_elementMouseEnterHandler","radioButtonInput.mouseenter":"_radioMouseEnterHandler","radioButtonInput.mouseleave":"_radioMouseLeaveHandler",focus:"_focusHandler",blur:"_blurHandler"}}static get styleUrls(){return["smart.radiobutton.css"]}_radioMouseEnterHandler(){const a=this;a.$.setAttributeValue("hover",!0)}_radioMouseLeaveHandler(){const a=this;a.$.setAttributeValue("hover",!1)}_focusHandler(){const a=this;a.$.setAttributeValue("focus",!0)}_blurHandler(){const a=this;a.$.setAttributeValue("focus",!1)}_mouseEnterHandler(){const a=this;a.$.setAttributeValue("hover",!0)}_mouseLeaveHandler(){const a=this;a.$.setAttributeValue("hover",!1)}ready(){const a=this;super.ready(),a._handleMultipleCheckedInstances(),a._updateHidenInputNameAndValue()}_downHandler(a){const b=this,c=b.enableShadowDOM?a.originalEvent.composedPath()[0]:a.originalEvent.target;if(!(b.disabled||b.readonly||"input"===b.checkMode&&c!==b.$.radioButtonInput||"label"===b.checkMode&&c!==b.$.radioButtonLabel)){if(b.$.setAttributeValue("active",!0),b.hasRippleAnimation){const a=b.$.radioButtonInput.getBoundingClientRect(),c=window.scrollX||window.pageXOffset,d=window.scrollY||window.pageYOffset;Smart.Utilities.Animation.Ripple.animate(b.$.radioButtonInput,a.left+a.width/2+c,a.top+a.height/2+d)}return b._preventAction?void(b._preventAction=!1):void(("release"===b.clickMode||"pressAndRelease"===b.clickMode)&&(b._pressed=!0),("press"===b.clickMode||"pressAndRelease"===b.clickMode)&&("pressAndRelease"===b.clickMode&&(""===b.groupName?b._checkedBeforeChange=b.parentNode.querySelector("smart-radio-button[checked]"):b._checkedBeforeChange=document.querySelector("smart-radio-button[group-name=\""+b.groupName+"\"][checked]")),b._handleMouseInteraction()))}}_elementMouseEnterHandler(){const a=this;"hover"!==a.clickMode||a.disabled||a.readonly||a._handleMouseInteraction()}_documentUpHandler(a){const b=this,c=b.enableShadowDOM?a.originalEvent.composedPath()[0]:a.originalEvent.target;!b._pressed||b.disabled||b.readonly||"input"===b.checkMode&&c!==b.$.radioButtonInput||"label"===b.checkMode&&c!==b.$.radioButtonLabel||("release"===b.clickMode?b._handleMouseInteraction():(null===b._checkedBeforeChange?(b.$.fireEvent("change",{value:!1,oldValue:!0,changeType:"pointer"}),b.checked=!1):b._checkedBeforeChange._changeCheckState("pointer"),b.focus(),b._updateHidenInputNameAndValue()),b.$.setAttributeValue("active",!1),b._pressed=!1)}_handleMouseInteraction(){const a=this;a._handleTextSelection(),a._changeCheckState("pointer"),a.focus(),a._updateHidenInputNameAndValue()}_handleMultipleCheckedInstances(){const a=this,b=Array.from(document.querySelectorAll("smart-radio-button[group-name=\""+a.groupName+"\"][checked]")),c=b.length;2>c||b.forEach((a,b)=>b<c-1&&(a.checked=!1))}_changeCheckState(a){const b=this;let c=document.querySelectorAll("smart-radio-button[group-name=\""+b.groupName+"\"]");if(!0===b.checked&&"api"===a||!1===b.checked)if(0<c.length)b._changeCheckStateInGroup(c,a);else{let d=b.parentNode;c=d.querySelectorAll("smart-radio-button:not([group-name])"),b._changeCheckStateInGroup(c,a)}}_changeCheckStateInGroup(a,b){const c=this;for(let d=0;d<a.length;d++)a[d]._isUpdating=!0,a[d]===c?(c.checked=!0,c.$.fireEvent("change",{value:!0,oldValue:!1,changeType:b})):a[d].checked&&(a[d].checked=!1),a[d]._isUpdating=!1}propertyChangedHandler(a,b,c){const d=this;switch(a){case"value":d._updateHidenInputNameAndValue();break;case"checked":d._isUpdating||d._changeCheckState("api"),d._updateHidenInputNameAndValue();break;case"name":d._updateHidenInputName();break;default:super.propertyChangedHandler(a,b,c);}}});